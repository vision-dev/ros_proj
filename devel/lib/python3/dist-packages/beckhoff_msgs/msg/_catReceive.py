# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from beckhoff_msgs/catReceive.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class catReceive(genpy.Message):
  _md5sum = "1e32c3fba4c7a01b6dd0b032a6c34aeb"
  _type = "beckhoff_msgs/catReceive"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[2] v
float64 Velocity
float64 AngularVel
float64 X_poz
float64 Y_poz
float64 Th_poz
float64 Th_pozPi"""
  __slots__ = ['v','Velocity','AngularVel','X_poz','Y_poz','Th_poz','Th_pozPi']
  _slot_types = ['float64[2]','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       v,Velocity,AngularVel,X_poz,Y_poz,Th_poz,Th_pozPi

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(catReceive, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.v is None:
        self.v = [0.] * 2
      if self.Velocity is None:
        self.Velocity = 0.
      if self.AngularVel is None:
        self.AngularVel = 0.
      if self.X_poz is None:
        self.X_poz = 0.
      if self.Y_poz is None:
        self.Y_poz = 0.
      if self.Th_poz is None:
        self.Th_poz = 0.
      if self.Th_pozPi is None:
        self.Th_pozPi = 0.
    else:
      self.v = [0.] * 2
      self.Velocity = 0.
      self.AngularVel = 0.
      self.X_poz = 0.
      self.Y_poz = 0.
      self.Th_poz = 0.
      self.Th_pozPi = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_2d().pack(*self.v))
      _x = self
      buff.write(_get_struct_6d().pack(_x.Velocity, _x.AngularVel, _x.X_poz, _x.Y_poz, _x.Th_poz, _x.Th_pozPi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 16
      self.v = _get_struct_2d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.Velocity, _x.AngularVel, _x.X_poz, _x.Y_poz, _x.Th_poz, _x.Th_pozPi,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.v.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.Velocity, _x.AngularVel, _x.X_poz, _x.Y_poz, _x.Th_poz, _x.Th_pozPi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 16
      self.v = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      _x = self
      start = end
      end += 48
      (_x.Velocity, _x.AngularVel, _x.X_poz, _x.Y_poz, _x.Th_poz, _x.Th_pozPi,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
