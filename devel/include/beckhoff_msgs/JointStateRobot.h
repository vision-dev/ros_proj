// Generated by gencpp from file beckhoff_msgs/JointStateRobot.msg
// DO NOT EDIT!


#ifndef BECKHOFF_MSGS_MESSAGE_JOINTSTATEROBOT_H
#define BECKHOFF_MSGS_MESSAGE_JOINTSTATEROBOT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <beckhoff_msgs/Vector_q5.h>
#include <beckhoff_msgs/Vector_q5.h>

namespace beckhoff_msgs
{
template <class ContainerAllocator>
struct JointStateRobot_
{
  typedef JointStateRobot_<ContainerAllocator> Type;

  JointStateRobot_()
    : Timestamp()
    , qq()
    , dq()  {
    }
  JointStateRobot_(const ContainerAllocator& _alloc)
    : Timestamp()
    , qq(_alloc)
    , dq(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _Timestamp_type;
  _Timestamp_type Timestamp;

   typedef  ::beckhoff_msgs::Vector_q5_<ContainerAllocator>  _qq_type;
  _qq_type qq;

   typedef  ::beckhoff_msgs::Vector_q5_<ContainerAllocator>  _dq_type;
  _dq_type dq;





  typedef boost::shared_ptr< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> const> ConstPtr;

}; // struct JointStateRobot_

typedef ::beckhoff_msgs::JointStateRobot_<std::allocator<void> > JointStateRobot;

typedef boost::shared_ptr< ::beckhoff_msgs::JointStateRobot > JointStateRobotPtr;
typedef boost::shared_ptr< ::beckhoff_msgs::JointStateRobot const> JointStateRobotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beckhoff_msgs::JointStateRobot_<ContainerAllocator1> & lhs, const ::beckhoff_msgs::JointStateRobot_<ContainerAllocator2> & rhs)
{
  return lhs.Timestamp == rhs.Timestamp &&
    lhs.qq == rhs.qq &&
    lhs.dq == rhs.dq;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beckhoff_msgs::JointStateRobot_<ContainerAllocator1> & lhs, const ::beckhoff_msgs::JointStateRobot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beckhoff_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edf7b25e91309ae0441c692ca3db83b0";
  }

  static const char* value(const ::beckhoff_msgs::JointStateRobot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedf7b25e91309ae0ULL;
  static const uint64_t static_value2 = 0x441c692ca3db83b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beckhoff_msgs/JointStateRobot";
  }

  static const char* value(const ::beckhoff_msgs::JointStateRobot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time Timestamp\n"
"Vector_q5 qq\n"
"Vector_q5 dq\n"
"================================================================================\n"
"MSG: beckhoff_msgs/Vector_q5\n"
"float32 j0\n"
"float32 j1\n"
"float32 j2\n"
"float32 j3\n"
"float32 j4\n"
;
  }

  static const char* value(const ::beckhoff_msgs::JointStateRobot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Timestamp);
      stream.next(m.qq);
      stream.next(m.dq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointStateRobot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beckhoff_msgs::JointStateRobot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beckhoff_msgs::JointStateRobot_<ContainerAllocator>& v)
  {
    s << indent << "Timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.Timestamp);
    s << indent << "qq: ";
    s << std::endl;
    Printer< ::beckhoff_msgs::Vector_q5_<ContainerAllocator> >::stream(s, indent + "  ", v.qq);
    s << indent << "dq: ";
    s << std::endl;
    Printer< ::beckhoff_msgs::Vector_q5_<ContainerAllocator> >::stream(s, indent + "  ", v.dq);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BECKHOFF_MSGS_MESSAGE_JOINTSTATEROBOT_H
