// Generated by gencpp from file beckhoff_msgs/catSend.msg
// DO NOT EDIT!


#ifndef BECKHOFF_MSGS_MESSAGE_CATSEND_H
#define BECKHOFF_MSGS_MESSAGE_CATSEND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beckhoff_msgs
{
template <class ContainerAllocator>
struct catSend_
{
  typedef catSend_<ContainerAllocator> Type;

  catSend_()
    : VelX(0.0)
    , VelRot(0.0)
    , ResetPoz(false)  {
    }
  catSend_(const ContainerAllocator& _alloc)
    : VelX(0.0)
    , VelRot(0.0)
    , ResetPoz(false)  {
  (void)_alloc;
    }



   typedef double _VelX_type;
  _VelX_type VelX;

   typedef double _VelRot_type;
  _VelRot_type VelRot;

   typedef uint8_t _ResetPoz_type;
  _ResetPoz_type ResetPoz;





  typedef boost::shared_ptr< ::beckhoff_msgs::catSend_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beckhoff_msgs::catSend_<ContainerAllocator> const> ConstPtr;

}; // struct catSend_

typedef ::beckhoff_msgs::catSend_<std::allocator<void> > catSend;

typedef boost::shared_ptr< ::beckhoff_msgs::catSend > catSendPtr;
typedef boost::shared_ptr< ::beckhoff_msgs::catSend const> catSendConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beckhoff_msgs::catSend_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beckhoff_msgs::catSend_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beckhoff_msgs::catSend_<ContainerAllocator1> & lhs, const ::beckhoff_msgs::catSend_<ContainerAllocator2> & rhs)
{
  return lhs.VelX == rhs.VelX &&
    lhs.VelRot == rhs.VelRot &&
    lhs.ResetPoz == rhs.ResetPoz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beckhoff_msgs::catSend_<ContainerAllocator1> & lhs, const ::beckhoff_msgs::catSend_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beckhoff_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beckhoff_msgs::catSend_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beckhoff_msgs::catSend_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beckhoff_msgs::catSend_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beckhoff_msgs::catSend_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beckhoff_msgs::catSend_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beckhoff_msgs::catSend_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beckhoff_msgs::catSend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e4b9f26ff50bf503fcd6a14b54ee63d";
  }

  static const char* value(const ::beckhoff_msgs::catSend_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e4b9f26ff50bf50ULL;
  static const uint64_t static_value2 = 0x3fcd6a14b54ee63dULL;
};

template<class ContainerAllocator>
struct DataType< ::beckhoff_msgs::catSend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beckhoff_msgs/catSend";
  }

  static const char* value(const ::beckhoff_msgs::catSend_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beckhoff_msgs::catSend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 VelX\n"
"float64 VelRot\n"
"bool ResetPoz\n"
;
  }

  static const char* value(const ::beckhoff_msgs::catSend_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beckhoff_msgs::catSend_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.VelX);
      stream.next(m.VelRot);
      stream.next(m.ResetPoz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct catSend_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beckhoff_msgs::catSend_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beckhoff_msgs::catSend_<ContainerAllocator>& v)
  {
    s << indent << "VelX: ";
    Printer<double>::stream(s, indent + "  ", v.VelX);
    s << indent << "VelRot: ";
    Printer<double>::stream(s, indent + "  ", v.VelRot);
    s << indent << "ResetPoz: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ResetPoz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BECKHOFF_MSGS_MESSAGE_CATSEND_H
