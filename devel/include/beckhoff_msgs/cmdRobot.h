// Generated by gencpp from file beckhoff_msgs/cmdRobot.msg
// DO NOT EDIT!


#ifndef BECKHOFF_MSGS_MESSAGE_CMDROBOT_H
#define BECKHOFF_MSGS_MESSAGE_CMDROBOT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beckhoff_msgs
{
template <class ContainerAllocator>
struct cmdRobot_
{
  typedef cmdRobot_<ContainerAllocator> Type;

  cmdRobot_()
    : Timestamp(0.0)
    , Vector_q5()  {
      Vector_q5.assign(0.0);
  }
  cmdRobot_(const ContainerAllocator& _alloc)
    : Timestamp(0.0)
    , Vector_q5()  {
  (void)_alloc;
      Vector_q5.assign(0.0);
  }



   typedef float _Timestamp_type;
  _Timestamp_type Timestamp;

   typedef boost::array<float, 5>  _Vector_q5_type;
  _Vector_q5_type Vector_q5;





  typedef boost::shared_ptr< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> const> ConstPtr;

}; // struct cmdRobot_

typedef ::beckhoff_msgs::cmdRobot_<std::allocator<void> > cmdRobot;

typedef boost::shared_ptr< ::beckhoff_msgs::cmdRobot > cmdRobotPtr;
typedef boost::shared_ptr< ::beckhoff_msgs::cmdRobot const> cmdRobotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beckhoff_msgs::cmdRobot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beckhoff_msgs::cmdRobot_<ContainerAllocator1> & lhs, const ::beckhoff_msgs::cmdRobot_<ContainerAllocator2> & rhs)
{
  return lhs.Timestamp == rhs.Timestamp &&
    lhs.Vector_q5 == rhs.Vector_q5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beckhoff_msgs::cmdRobot_<ContainerAllocator1> & lhs, const ::beckhoff_msgs::cmdRobot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beckhoff_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c364234fdb48115e683b6d91edb1a06";
  }

  static const char* value(const ::beckhoff_msgs::cmdRobot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c364234fdb48115ULL;
  static const uint64_t static_value2 = 0xe683b6d91edb1a06ULL;
};

template<class ContainerAllocator>
struct DataType< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beckhoff_msgs/cmdRobot";
  }

  static const char* value(const ::beckhoff_msgs::cmdRobot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Timestamp\n"
"float32[5] Vector_q5\n"
;
  }

  static const char* value(const ::beckhoff_msgs::cmdRobot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Timestamp);
      stream.next(m.Vector_q5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmdRobot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beckhoff_msgs::cmdRobot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beckhoff_msgs::cmdRobot_<ContainerAllocator>& v)
  {
    s << indent << "Timestamp: ";
    Printer<float>::stream(s, indent + "  ", v.Timestamp);
    s << indent << "Vector_q5[]" << std::endl;
    for (size_t i = 0; i < v.Vector_q5.size(); ++i)
    {
      s << indent << "  Vector_q5[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Vector_q5[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BECKHOFF_MSGS_MESSAGE_CMDROBOT_H
