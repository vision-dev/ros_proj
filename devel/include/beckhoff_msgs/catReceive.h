// Generated by gencpp from file beckhoff_msgs/catReceive.msg
// DO NOT EDIT!


#ifndef BECKHOFF_MSGS_MESSAGE_CATRECEIVE_H
#define BECKHOFF_MSGS_MESSAGE_CATRECEIVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beckhoff_msgs
{
template <class ContainerAllocator>
struct catReceive_
{
  typedef catReceive_<ContainerAllocator> Type;

  catReceive_()
    : v()
    , Velocity(0.0)
    , AngularVel(0.0)
    , X_poz(0.0)
    , Y_poz(0.0)
    , Th_poz(0.0)
    , Th_pozPi(0.0)  {
      v.assign(0.0);
  }
  catReceive_(const ContainerAllocator& _alloc)
    : v()
    , Velocity(0.0)
    , AngularVel(0.0)
    , X_poz(0.0)
    , Y_poz(0.0)
    , Th_poz(0.0)
    , Th_pozPi(0.0)  {
  (void)_alloc;
      v.assign(0.0);
  }



   typedef boost::array<double, 2>  _v_type;
  _v_type v;

   typedef double _Velocity_type;
  _Velocity_type Velocity;

   typedef double _AngularVel_type;
  _AngularVel_type AngularVel;

   typedef double _X_poz_type;
  _X_poz_type X_poz;

   typedef double _Y_poz_type;
  _Y_poz_type Y_poz;

   typedef double _Th_poz_type;
  _Th_poz_type Th_poz;

   typedef double _Th_pozPi_type;
  _Th_pozPi_type Th_pozPi;





  typedef boost::shared_ptr< ::beckhoff_msgs::catReceive_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beckhoff_msgs::catReceive_<ContainerAllocator> const> ConstPtr;

}; // struct catReceive_

typedef ::beckhoff_msgs::catReceive_<std::allocator<void> > catReceive;

typedef boost::shared_ptr< ::beckhoff_msgs::catReceive > catReceivePtr;
typedef boost::shared_ptr< ::beckhoff_msgs::catReceive const> catReceiveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beckhoff_msgs::catReceive_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beckhoff_msgs::catReceive_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beckhoff_msgs::catReceive_<ContainerAllocator1> & lhs, const ::beckhoff_msgs::catReceive_<ContainerAllocator2> & rhs)
{
  return lhs.v == rhs.v &&
    lhs.Velocity == rhs.Velocity &&
    lhs.AngularVel == rhs.AngularVel &&
    lhs.X_poz == rhs.X_poz &&
    lhs.Y_poz == rhs.Y_poz &&
    lhs.Th_poz == rhs.Th_poz &&
    lhs.Th_pozPi == rhs.Th_pozPi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beckhoff_msgs::catReceive_<ContainerAllocator1> & lhs, const ::beckhoff_msgs::catReceive_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beckhoff_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beckhoff_msgs::catReceive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beckhoff_msgs::catReceive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beckhoff_msgs::catReceive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beckhoff_msgs::catReceive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beckhoff_msgs::catReceive_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beckhoff_msgs::catReceive_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beckhoff_msgs::catReceive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e32c3fba4c7a01b6dd0b032a6c34aeb";
  }

  static const char* value(const ::beckhoff_msgs::catReceive_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e32c3fba4c7a01bULL;
  static const uint64_t static_value2 = 0x6dd0b032a6c34aebULL;
};

template<class ContainerAllocator>
struct DataType< ::beckhoff_msgs::catReceive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beckhoff_msgs/catReceive";
  }

  static const char* value(const ::beckhoff_msgs::catReceive_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beckhoff_msgs::catReceive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[2] v\n"
"float64 Velocity\n"
"float64 AngularVel\n"
"float64 X_poz\n"
"float64 Y_poz\n"
"float64 Th_poz\n"
"float64 Th_pozPi\n"
;
  }

  static const char* value(const ::beckhoff_msgs::catReceive_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beckhoff_msgs::catReceive_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.v);
      stream.next(m.Velocity);
      stream.next(m.AngularVel);
      stream.next(m.X_poz);
      stream.next(m.Y_poz);
      stream.next(m.Th_poz);
      stream.next(m.Th_pozPi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct catReceive_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beckhoff_msgs::catReceive_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beckhoff_msgs::catReceive_<ContainerAllocator>& v)
  {
    s << indent << "v[]" << std::endl;
    for (size_t i = 0; i < v.v.size(); ++i)
    {
      s << indent << "  v[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.v[i]);
    }
    s << indent << "Velocity: ";
    Printer<double>::stream(s, indent + "  ", v.Velocity);
    s << indent << "AngularVel: ";
    Printer<double>::stream(s, indent + "  ", v.AngularVel);
    s << indent << "X_poz: ";
    Printer<double>::stream(s, indent + "  ", v.X_poz);
    s << indent << "Y_poz: ";
    Printer<double>::stream(s, indent + "  ", v.Y_poz);
    s << indent << "Th_poz: ";
    Printer<double>::stream(s, indent + "  ", v.Th_poz);
    s << indent << "Th_pozPi: ";
    Printer<double>::stream(s, indent + "  ", v.Th_pozPi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BECKHOFF_MSGS_MESSAGE_CATRECEIVE_H
